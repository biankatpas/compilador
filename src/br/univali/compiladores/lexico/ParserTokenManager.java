/* ParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package br.univali.compiladores.lexico;
import java.util.ArrayList;
import java.util.List;
import java.io.StringReader;

/** Token Manager. */
public class ParserTokenManager implements ParserConstants {
    int countLexError = 0;

    public int foundLexError() {
        return countLexError;
    }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x800000000L) != 0L)
            return 18;
         if ((active0 & 0x7ffff8000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 0;
            return 62;
         }
         return -1;
      case 1:
         if ((active0 & 0x208080000L) != 0L)
            return 63;
         if ((active0 & 0x5f7f78000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 1;
            return 63;
         }
         return -1;
      case 2:
         if ((active0 & 0x34100000L) != 0L)
            return 63;
         if ((active0 & 0x5c3e78000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 2;
            return 63;
         }
         return -1;
      case 3:
         if ((active0 & 0x140200000L) != 0L)
            return 63;
         if ((active0 & 0x483c78000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 3;
            return 63;
         }
         return -1;
      case 4:
         if ((active0 & 0x481000000L) != 0L)
            return 63;
         if ((active0 & 0x2c78000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 4;
            return 63;
         }
         return -1;
      case 5:
         if ((active0 & 0x20000L) != 0L)
            return 63;
         if ((active0 & 0x2c58000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 5;
            return 63;
         }
         return -1;
      case 6:
         if ((active0 & 0x2c18000L) != 0L)
            return 63;
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 6;
            return 63;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         {
         jjmatchedKind = 47;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x20000000000000L);
      case 37:
         {
         jjmatchedKind = 45;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x40000000000000L);
      case 38:
         return jjStopAtPos(0, 52);
      case 40:
         return jjStopAtPos(0, 56);
      case 41:
         return jjStopAtPos(0, 57);
      case 42:
         return jjStopAtPos(0, 43);
      case 43:
         return jjStopAtPos(0, 41);
      case 44:
         return jjStopAtPos(0, 38);
      case 45:
         return jjStopAtPos(0, 42);
      case 46:
         return jjStartNfaWithStates_0(0, 35, 18);
      case 47:
         {
         jjmatchedKind = 44;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0xc0L);
      case 60:
         {
         jjmatchedKind = 50;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x8000000000000L);
      case 61:
         return jjStopAtPos(0, 46);
      case 62:
         {
         jjmatchedKind = 48;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x2000000000000L);
      case 91:
         return jjStopAtPos(0, 36);
      case 93:
         return jjStopAtPos(0, 37);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x240000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x200020000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x401000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x880000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x20018000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x108000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      case 123:
         return jjStopAtPos(0, 39);
      case 124:
         return jjStopAtPos(0, 55);
      case 125:
         return jjStopAtPos(0, 40);
      default :
         return jjMoveNfa_0(19, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 37:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         break;
      case 42:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 47:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      case 61:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 51);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 53);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x14020000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x80200000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      case 79:
      case 111:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(1, 27, 63);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(1, 33, 63);
         return jjMoveStringLiteralDfa2_0(active0, 0x40540000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x100010000L);
      case 83:
      case 115:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(1, 19, 63);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x20008000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x41410000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 84:
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 20, 63);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 63);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 28, 63);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 29, 63);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
      case 69:
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 63);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x80400000L);
      case 80:
      case 112:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 63);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 82:
      case 114:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 63);
         break;
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x400040000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 63);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 63);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      case 84:
      case 116:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 63);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x450000L);
      case 69:
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 17, 63);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 15, 63);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 25, 63);
         break;
      case 77:
      case 109:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 16, 63);
         break;
      case 78:
      case 110:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 22, 63);
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L);
      case 82:
      case 114:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 23, 63);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 18, 63);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 62;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 19:
                  if ((0x8c004018ffffc9ffL & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     { jjCheckNAdd(18); }
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                     { jjCheckNAddStates(0, 6); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAddStates(7, 10); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(11, 14); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(15, 20); }
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(26, 27); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(24); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(22, 23); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(20, 21); }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(26, 27); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(24); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(22, 23); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(20, 21); }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(21, 22); }
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 18:
                  if ((0x8c004018ffffc9ffL & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  { jjCheckNAdd(18); }
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L && kind > 62)
                     kind = 62;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(22, 23); }
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(24); }
                  break;
               case 24:
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  { jjCheckNAdd(25); }
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(26, 27); }
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAddStates(0, 6); }
                  break;
               case 31:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L && kind > 13)
                     kind = 13;
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  { jjCheckNAdd(34); }
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(36); }
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  { jjCheckNAdd(36); }
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(40); }
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(40, 41); }
                  break;
               case 41:
                  if (curChar == 46)
                     { jjCheckNAdd(42); }
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  { jjCheckNAdd(42); }
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(23, 26); }
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(31); }
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(44, 31); }
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(27, 29); }
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 52:
                  if (curChar == 34)
                     { jjCheckNAddStates(11, 14); }
                  break;
               case 53:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(53, 54); }
                  break;
               case 54:
                  if (curChar == 34 && kind > 63)
                     kind = 63;
                  break;
               case 55:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(55, 56); }
                  break;
               case 56:
                  if ((0xfffffffbffffffffL & l) != 0L && kind > 68)
                     kind = 68;
                  break;
               case 57:
                  if (curChar == 39)
                     { jjCheckNAddStates(7, 10); }
                  break;
               case 58:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(58, 59); }
                  break;
               case 59:
                  if (curChar == 39 && kind > 64)
                     kind = 64;
                  break;
               case 60:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(60, 61); }
                  break;
               case 61:
                  if ((0xffffff7fffffffffL & l) != 0L && kind > 68)
                     kind = 68;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 19:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(15, 20); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     { jjCheckNAddStates(30, 32); }
                  }
                  else if ((0xc0000001d0000001L & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     { jjCheckNAdd(18); }
                  }
                  if (curChar == 95)
                     { jjCheckNAddStates(33, 36); }
                  break;
               case 63:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(26, 27); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(22, 23); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(20, 21); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     { jjCheckNAddStates(37, 43); }
                  }
                  else if (curChar == 95)
                     { jjCheckNAddStates(44, 49); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     { jjCheckNAddStates(50, 54); }
                  }
                  else if (curChar == 95)
                     { jjCheckNAddStates(55, 58); }
                  if (curChar == 95)
                     { jjCheckNAddStates(55, 58); }
                  if (curChar == 95)
                     { jjCheckNAdd(28); }
                  if (curChar == 95)
                     { jjAddStates(59, 60); }
                  break;
               case 62:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(26, 27); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(22, 23); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(20, 21); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     { jjCheckNAddStates(37, 43); }
                  }
                  else if (curChar == 95)
                     { jjCheckNAddStates(44, 49); }
                  if (curChar == 95)
                     { jjCheckNAdd(28); }
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  { jjCheckNAddStates(30, 32); }
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  { jjCheckNAddStates(61, 63); }
                  break;
               case 3:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  { jjCheckNAddStates(50, 54); }
                  break;
               case 4:
                  if (curChar == 95)
                     { jjAddStates(59, 60); }
                  break;
               case 5:
               case 9:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  { jjCheckNAddStates(61, 63); }
                  break;
               case 6:
                  if (curChar == 95)
                     { jjCheckNAddStates(55, 58); }
                  break;
               case 7:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(7, 9); }
                  break;
               case 10:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if (curChar != 95)
                     break;
                  if (kind > 61)
                     kind = 61;
                  { jjCheckNAddStates(64, 67); }
                  break;
               case 12:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(13, 9); }
                  break;
               case 13:
                  if (curChar == 95)
                     { jjCheckNAdd(12); }
                  break;
               case 15:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  { jjCheckNAddStates(37, 43); }
                  break;
               case 16:
                  if (curChar == 95)
                     { jjCheckNAddStates(44, 49); }
                  break;
               case 18:
                  if ((0xc0000001d0000001L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  { jjCheckNAdd(18); }
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(22, 23); }
                  break;
               case 25:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 26:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(26, 27); }
                  break;
               case 27:
                  if (curChar == 95)
                     { jjCheckNAdd(28); }
                  break;
               case 28:
                  if (curChar != 95)
                     break;
                  if (kind > 62)
                     kind = 62;
                  { jjCheckNAdd(29); }
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  { jjCheckNAdd(29); }
                  break;
               case 34:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 49:
                  if (curChar == 95)
                     { jjCheckNAddStates(33, 36); }
                  break;
               case 50:
                  if (curChar != 95)
                     break;
                  if (kind > 62)
                     kind = 62;
                  { jjCheckNAdd(51); }
                  break;
               case 51:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  { jjCheckNAdd(51); }
                  break;
               case 53:
                  { jjAddStates(68, 69); }
                  break;
               case 55:
                  { jjAddStates(70, 71); }
                  break;
               case 56:
               case 61:
                  if (kind > 68)
                     kind = 68;
                  break;
               case 58:
                  { jjAddStates(72, 73); }
                  break;
               case 60:
                  { jjAddStates(74, 75); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 19:
               case 18:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  { jjCheckNAdd(18); }
                  break;
               case 53:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(68, 69); }
                  break;
               case 55:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(70, 71); }
                  break;
               case 56:
               case 61:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 68)
                     kind = 68;
                  break;
               case 58:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(72, 73); }
                  break;
               case 60:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(74, 75); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 62 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(0, 0);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                     kind = 10;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x100L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      default :
         return 2;
   }
   return 2;
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, "\56", "\133", "\135", "\54", 
"\173", "\175", "\53", "\55", "\52", "\57", "\45", "\75", "\41", "\76", "\76\75", 
"\74", "\74\75", "\46", "\41\75", "\45\45", "\174", "\50", "\51", null, null, null, 
null, null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         curTokenImage = "";
      else
         curTokenImage = image.toString();
      beginLine = endLine = input_stream.getEndLine();
      beginColumn = endColumn = input_stream.getEndColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      curTokenImage = (im == null) ? input_stream.GetImage() : im;
      beginLine = input_stream.getBeginLine();
      beginColumn = input_stream.getBeginColumn();
      endLine = input_stream.getEndLine();
      endColumn = input_stream.getEndColumn();
   }
   t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   t.image = curTokenImage;

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   31, 34, 24, 35, 37, 43, 47, 58, 59, 60, 61, 53, 54, 55, 56, 20, 
   21, 22, 23, 26, 27, 13, 9, 44, 31, 45, 46, 44, 31, 45, 1, 15, 
   16, 0, 17, 28, 50, 1, 4, 3, 6, 6, 15, 16, 0, 17, 7, 9, 
   10, 12, 1, 4, 3, 6, 6, 7, 9, 10, 12, 5, 14, 1, 3, 6, 
   1, 10, 3, 6, 53, 54, 55, 56, 58, 59, 60, 61, 
};

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 65;
       jjmatchedPos = -1;
       curPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 9)
       {
          jjmatchedKind = 9;
       }
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       if (jjmatchedPos == 0 && jjmatchedKind > 11)
       {
          jjmatchedKind = 11;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

int[] jjemptyLineNo = new int[3];
int[] jjemptyColNo = new int[3];
boolean[] jjbeenHere = new boolean[3];
void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 1 :
         break;
      case 2 :
         break;
      case 3 :
         break;
      case 4 :
         break;
      case 5 :
         break;
      case 6 :
         break;
      case 7 :
         break;
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 0 :
         break;
      case 12 :
         break;
      case 13 :
         break;
      case 15 :
         break;
      case 16 :
         break;
      case 17 :
         break;
      case 18 :
         break;
      case 19 :
         break;
      case 20 :
         break;
      case 21 :
         break;
      case 22 :
         break;
      case 23 :
         break;
      case 24 :
         break;
      case 25 :
         break;
      case 26 :
         break;
      case 27 :
         break;
      case 28 :
         break;
      case 29 :
         break;
      case 30 :
         break;
      case 31 :
         break;
      case 32 :
         break;
      case 33 :
         break;
      case 34 :
         break;
      case 35 :
         break;
      case 36 :
         break;
      case 37 :
         break;
      case 38 :
         break;
      case 39 :
         break;
      case 40 :
         break;
      case 41 :
         break;
      case 42 :
         break;
      case 43 :
         break;
      case 44 :
         break;
      case 45 :
         break;
      case 46 :
         break;
      case 47 :
         break;
      case 48 :
         break;
      case 49 :
         break;
      case 50 :
         break;
      case 51 :
         break;
      case 52 :
         break;
      case 53 :
         break;
      case 54 :
         break;
      case 55 :
         break;
      case 56 :
         break;
      case 57 :
         break;
      case 61 :
         break;
      case 62 :
         break;
      case 63 :
         break;
      case 64 :
         break;
      case 65 :
         if (jjmatchedPos == -1)
         {
            if (jjbeenHere[0] &&
                jjemptyLineNo[0] == input_stream.getBeginLine() &&
                jjemptyColNo[0] == input_stream.getBeginColumn())
               throw new TokenMgrError(("Error: Bailing out of infinite loop caused by repeated empty string matches at line " + input_stream.getBeginLine() + ", column " + input_stream.getBeginColumn() + "."), TokenMgrError.LOOP_DETECTED);
            jjemptyLineNo[0] = input_stream.getBeginLine();
            jjemptyColNo[0] = input_stream.getBeginColumn();
            jjbeenHere[0] = true;
         }
         break;
      case 66 :
         break;
      case 67 :
         break;
      case 68 :
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public ParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public ParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 62; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "multilinecomment",
   "singlelinecomment",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 2, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xe3ffffffffffb001L, 0x1fL, 
};
static final long[] jjtoSkip = {
   0xffeL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[62];
    private final int[] jjstateSet = new int[2 * 62];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
