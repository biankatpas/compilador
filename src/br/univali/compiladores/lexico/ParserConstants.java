/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */
package br.univali.compiladores.lexico;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int CONSTANTE_NUM_INTEIRA = 12;
  /** RegularExpression Id. */
  int CONSTANTE_NUM_REAL = 13;
  /** RegularExpression Id. */
  int DIGIT = 14;
  /** RegularExpression Id. */
  int PURPOSE = 15;
  /** RegularExpression Id. */
  int PROGRAM = 16;
  /** RegularExpression Id. */
  int DEFINE = 17;
  /** RegularExpression Id. */
  int CONSTANT = 18;
  /** RegularExpression Id. */
  int IS = 19;
  /** RegularExpression Id. */
  int NOT = 20;
  /** RegularExpression Id. */
  int CHAR = 21;
  /** RegularExpression Id. */
  int BOOLEAN = 22;
  /** RegularExpression Id. */
  int INT = 23;
  /** RegularExpression Id. */
  int REAL = 24;
  /** RegularExpression Id. */
  int EXECUTE = 25;
  /** RegularExpression Id. */
  int SET = 26;
  /** RegularExpression Id. */
  int TO = 27;
  /** RegularExpression Id. */
  int GET = 28;
  /** RegularExpression Id. */
  int PUT = 29;
  /** RegularExpression Id. */
  int LOOP = 30;
  /** RegularExpression Id. */
  int WHILE = 31;
  /** RegularExpression Id. */
  int TRUE = 32;
  /** RegularExpression Id. */
  int DO = 33;
  /** RegularExpression Id. */
  int FALSE = 34;
  /** RegularExpression Id. */
  int DOT = 35;
  /** RegularExpression Id. */
  int OPENBRACKET = 36;
  /** RegularExpression Id. */
  int CLOSEBRACKET = 37;
  /** RegularExpression Id. */
  int COMMA = 38;
  /** RegularExpression Id. */
  int OPENBRACE = 39;
  /** RegularExpression Id. */
  int CLOSEBRACE = 40;
  /** RegularExpression Id. */
  int PLUS = 41;
  /** RegularExpression Id. */
  int MINUS = 42;
  /** RegularExpression Id. */
  int MULTIPLY = 43;
  /** RegularExpression Id. */
  int FRACTION = 44;
  /** RegularExpression Id. */
  int PERCENT = 45;
  /** RegularExpression Id. */
  int EQUALS = 46;
  /** RegularExpression Id. */
  int EXCLAMATION = 47;
  /** RegularExpression Id. */
  int GREATER = 48;
  /** RegularExpression Id. */
  int GREATEREQUAL = 49;
  /** RegularExpression Id. */
  int LESS = 50;
  /** RegularExpression Id. */
  int LESSEQUAL = 51;
  /** RegularExpression Id. */
  int AMPERSAND = 52;
  /** RegularExpression Id. */
  int DIFFERENT = 53;
  /** RegularExpression Id. */
  int MOD = 54;
  /** RegularExpression Id. */
  int PIPE = 55;
  /** RegularExpression Id. */
  int OPENPARENTHESIS = 56;
  /** RegularExpression Id. */
  int CLOSEPARENTHESIS = 57;
  /** RegularExpression Id. */
  int LETTER_ID = 58;
  /** RegularExpression Id. */
  int DIGIT_ID = 59;
  /** RegularExpression Id. */
  int SYMBOL_UND = 60;
  /** RegularExpression Id. */
  int IDENTIFICATOR = 61;
  /** RegularExpression Id. */
  int INDENTIFICADOR_INVALIDO = 62;
  /** RegularExpression Id. */
  int STRING_DUPLA = 63;
  /** RegularExpression Id. */
  int STRING_SIMPLES = 64;
  /** RegularExpression Id. */
  int SIMBOLO_INVALIDO = 65;
  /** RegularExpression Id. */
  int CONSTANTE_NUM_INTEIRA_INVALIDA = 66;
  /** RegularExpression Id. */
  int CONSTANTE_NUM_REAL_INVALIDA = 67;
  /** RegularExpression Id. */
  int STRING_INVALIDA = 68;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int multilinecomment = 1;
  /** Lexical state. */
  int singlelinecomment = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"/*\"",
    "\"//\"",
    "\"*/\"",
    "<token of kind 9>",
    "<token of kind 10>",
    "<token of kind 11>",
    "<CONSTANTE_NUM_INTEIRA>",
    "<CONSTANTE_NUM_REAL>",
    "<DIGIT>",
    "\"purpose\"",
    "\"program\"",
    "\"define\"",
    "\"constant\"",
    "\"is\"",
    "\"not\"",
    "\"char\"",
    "\"boolean\"",
    "\"integer\"",
    "\"float\"",
    "\"execute\"",
    "\"set\"",
    "\"to\"",
    "\"get\"",
    "\"put\"",
    "\"loop\"",
    "\"while\"",
    "\"true\"",
    "\"do\"",
    "\"false\"",
    "\".\"",
    "\"[\"",
    "\"]\"",
    "\",\"",
    "\"{\"",
    "\"}\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"=\"",
    "\"!\"",
    "\">\"",
    "\">=\"",
    "\"<\"",
    "\"<=\"",
    "\"&\"",
    "\"!=\"",
    "\"%%\"",
    "\"|\"",
    "\"(\"",
    "\")\"",
    "<LETTER_ID>",
    "<DIGIT_ID>",
    "<SYMBOL_UND>",
    "<IDENTIFICATOR>",
    "<INDENTIFICADOR_INVALIDO>",
    "<STRING_DUPLA>",
    "<STRING_SIMPLES>",
    "<SIMBOLO_INVALIDO>",
    "<CONSTANTE_NUM_INTEIRA_INVALIDA>",
    "<CONSTANTE_NUM_REAL_INVALIDA>",
    "<STRING_INVALIDA>",
  };

}
