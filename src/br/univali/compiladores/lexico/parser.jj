options{
    STATIC = false;
    IGNORE_CASE = true;
}

PARSER_BEGIN(Parser)
package br.univali.compiladores.lexico;
import java.util.ArrayList;
import java.util.List;
import java.io.StringReader;

public class Parser {
        final static List<Message> output = new ArrayList<Message>();

        public Parser() {

        };

        public List<Message> lexicalAnalizer(String code){
            Parser lexicalParser = new Parser();
            
            try{
                lexicalParser = new Parser(new StringReader(code));
                lexicalParser.program();
            } catch(Exception e){
                //output.add(new Message(e.toString(), true));
            }
            
            List<Message> auxList = new ArrayList<Message>(output);
            output.clear();
            return auxList;
        }

	static public String im(int x) {
		int k;
		String s;
		s = tokenImage[x];
		k = s.lastIndexOf("\"");
		try {
			s = s.substring(1, k);
		} catch (StringIndexOutOfBoundsException e) {

		}
		return s;
	}
}
PARSER_END(Parser)

TOKEN_MGR_DECLS : {
    int countLexError = 0;

    public int foundLexError() {
        return countLexError;
    }   
}

JAVACODE void program() {
	Token t;
        String tokenType = "";

	do {
		t = getNextToken();
		Token st = t;
		while ( st.specialToken != null) {
                    st = st.specialToken;
		}
                

		do {
                switch (t.kind) {
                    case ParserConstants.INDENTIFICADOR_INVALIDO:
                        output.add(new Message("Error: Identificador Invalido em linha " + jj_input_stream.getBeginLine() + ", coluna " + jj_input_stream.getBeginColumn() + ".", true));
                        break;
                    case ParserConstants.SIMBOLO_INVALIDO:
                        output.add(new Message("Error: Simbolo Invalido em linha " + jj_input_stream.getBeginLine() + ", coluna " + jj_input_stream.getBeginColumn() + ".", true));
                        break;
                    case ParserConstants.CONSTANTE_NUM_INTEIRA_INVALIDA:
                        output.add(new Message("Error: Constante numerica inteira invalida em linha " + jj_input_stream.getBeginLine() + ", coluna " + jj_input_stream.getBeginColumn() + ".", true));
                        break;
                    case ParserConstants.CONSTANTE_NUM_REAL_INVALIDA:
                        output.add(new Message("Error: Constante numerica real invalida em linha " + jj_input_stream.getBeginLine() + ", coluna " + jj_input_stream.getBeginColumn() + ".", true));
                        break;
                    case ParserConstants.STRING_INVALIDA:
                        output.add(new Message("Error: Constante literal invalida em linha " + jj_input_stream.getBeginLine() + ", coluna " + jj_input_stream.getBeginColumn() + ".", true));
                        break;
                    default:
                        if (t.kind >= ParserConstants.PURPOSE && t.kind <= ParserConstants.FALSE) {
                            tokenType = "<PALAVRAS_RESERVADAS>";
                        } else if (t.kind >= ParserConstants.DOT && t.kind <= ParserConstants.CLOSEPARENTHESIS) {
                            tokenType = "<SIMBOLOS_ESPECIAIS>";
                        } else {
                            tokenType = im(st.kind);
                        }

                        String outputString = "Line: " + st.beginLine + "\u005ctColumn: " + st.beginColumn + "\u005ct" + st.image + " \u005ct" + tokenType + "\u005ct" + t.kind;

                        /* Filtro para n√£o tratar EOF */
                        if (t.kind != ParserConstants.EOF) {
                            output.add(new Message(outputString, false));
                        }
                        break;

                }
                st = st.next;

            } while (st != t.next);

        } while (t.kind != ParserConstants.EOF);

}

//CHARACTERS TO SCAPE
SKIP : {
    " "
	| "\t"
        | "\n"
        | "\r"
        | "\f"
}

SKIP : {
    "/*": multilinecomment
}

SKIP : {
    "//": singlelinecomment
}

<multilinecomment> SKIP : {
	"*/": DEFAULT
	| <~[]>
}

<singlelinecomment> SKIP : {
	<["\n", "\r"]> : DEFAULT
	| <~[]>
}

//INTEGER / FLOAT TOKENS
TOKEN : {
    <CONSTANTE_NUM_INTEIRA: <DIGIT>(<DIGIT>)?(<DIGIT>)?(<DIGIT>)?>
	| <CONSTANTE_NUM_REAL: <DIGIT>(<DIGIT>)?(<DIGIT>)?(<DIGIT>)?(<DIGIT>)?<DOT><DIGIT>(<DIGIT>)?>
	| <#DIGIT: ["0"-"9"]>
}

//RESERVED WORDS
TOKEN : {
    < PURPOSE: "purpose">
        |< DO: "do">
	| <THIS: "this">
        | <BODY: "body">
	| <DESCRIPTION: "description">
	| <DECLARATION: "declaration">
	| <TYPE: "type">
	| <IS: "is">
	| <CONSTANT: "constant">
	| <AND: "and">
        | <VARIABLE: "variable">  
	| <AS: "as">
	| <INTEGER: "integer">
	| <REAL: "real">
	| <STRING: "string">
	| <LOGIC: "logic">
	| <DESIGNETED: "designeted">
	| <TO: "to">
	| <READ: "read">
	| <WRITE: "write">
	| <ALL: "all">
	| <REPEAT: "repeat">
	| <TRUE: "true">
	| <UNTRUE: "untrue">
        | <FALSE: "false">
}


//SPECIAL SYMBOLS
TOKEN : {
    < OPENBRACKET: "["> 
	| < CLOSEBRACKET: "]">
	| <DOT: ".">
	| < COMMA: ",">
	| < ASSIGNMENT: "=">
	| < PLUS: "+">
	| < MINUS: "-">
	| < MULTIPLY: "*">
	| < FRACTION: "/">
	| < POTENCY: "**">
	| < PERCENT: "%">
	| < OPENBRACE: "{">
	| < CLOSEBRACE: "}">
	| < MOD: "%%">
	| < EQUALS: "==">
        | < DIFFERENT: "!=">
	| < LESS: "<<">
	| < GREATER: ">>">
	| < LESSEQUAL: "<<=">
	| < GREATEREQUAL: ">>=">
	| < AMPERSAND: "&">	
	| < PIPE: "|">
	| < EXCLAMATION: "!">	
	| < OPENPARENTHESIS: "(">
	| < CLOSEPARENTHESIS: ")">
}

TOKEN : //Global
{
    < #LETTER_UPPER: ["A"-"Z"] >
    | < #LETTER_LOWER: ["a"-"z"] >
    | < #LETTER_ID: ["A"-"Z", "a"-"z"] >
    | < #DIGIT_ID: ["0"-"9"] >
    | < #SYMBOL_UND: ["_"] >
}

TOKEN : // Identificadores
{ 

    <IDENTIFICATOR: (<LETTER_UPPER>(<DIGIT_ID>(((<DIGIT_ID>)?((<SYMBOL_UND>)(<LETTER_ID>)+(<DIGIT_ID>))|((<LETTER_ID>)+(<SYMBOL_UND><DIGIT_ID>))|(<SYMBOL_UND><DIGIT_ID>)|((<LETTER_ID>)+(<DIGIT_ID>))|((<SYMBOL_UND>)(<LETTER_ID>)+))*)|(<SYMBOL_UND>)|(<LETTER_ID>)+|((<SYMBOL_UND>)(<LETTER_ID>)+)|(<DIGIT_ID><SYMBOL_UND>)|((<DIGIT_ID><SYMBOL_UND>)(<LETTER_ID>)+)|((<DIGIT_ID>)(<LETTER_ID>))+)?)
                    |(<LETTER_UPPER>(<SYMBOL_UND>((<DIGIT_ID>)?((<DIGIT_ID><SYMBOL_UND><LETTER_ID>)|(<DIGIT_ID><LETTER_ID><SYMBOL_UND>)|(<LETTER_ID><SYMBOL_UND>)|(<DIGIT_ID><SYMBOL_UND>)|((<DIGIT_ID>)?(<LETTER_ID>))))*))
                    |(<LETTER_UPPER>((<LETTER_ID>)+)(((<SYMBOL_UND>)?)((<DIGIT_ID>)?)((<DIGIT_ID><SYMBOL_UND><LETTER_ID>)|(<DIGIT_ID><LETTER_ID>)|(<DIGIT_ID><SYMBOL_UND>)|(<LETTER_ID><SYMBOL_UND>)|(<DIGIT_ID><SYMBOL_UND><LETTER_ID>)))*)
   >
     
   

}

TOKEN :
{
   <INDENTIFICADOR_INVALIDO: <DIGIT_ID>(<LETTER_ID>|<SYMBOL_UND>|<DIGIT_ID>)* //COMECA COM DIGITO
                                | (<LETTER_LOWER>)* (<LETTER_ID>|<SYMBOL_UND>|<DIGIT_ID>)* // COMECA COM LETRA MINUSCULA
                                | (<LETTER_UPPER>)* <DIGIT_ID> //TERMINA COM DIGITO
                                | (<LETTER_UPPER>)* (<DIGIT_ID><DIGIT_ID><DIGIT_ID>) (<LETTER_ID>|<SYMBOL_UND>|<DIGIT_ID>)* // DIGITOS CONSECUTIVOS
                                | (<LETTER_UPPER>)* (<SYMBOL_UND><SYMBOL_UND>) (<LETTER_ID>|<SYMBOL_UND>|<DIGIT_ID>)* //DIGITOS CONSECUTIVOS
                                | (<LETTER_UPPER>)* (<SYMBOL_UND><SYMBOL_UND>) (<LETTER_ID>|<SYMBOL_UND>|<DIGIT_ID>)* // _ CONSECUTIVOS
                                | (<SYMBOL_UND>)(<LETTER_ID>|<SYMBOL_UND>|<DIGIT_ID>)*> // INICIANDO COM _            
}


// STRINGS TOKEN
TOKEN: {
   <STRING_DUPLA: "\"" (~[ "\"" ])* "\""> 
   |<STRING_SIMPLES: "'" (~[ "\'"])* "'">
}


TOKEN :
{
    <SIMBOLO_INVALIDO: (~ ["a"-"z", "A"-"Z",
                    "0"-"9",
                    "[",
                    "]",
                    ",",
                    "{",
                    "}",
                    "+",
                    "-",
                    "*",
                    "/",
                    "%",
                    "=",
                    "!",
                    ">",
                    "<",
                    "&",
                    "|",
                    "(",
                    ")",
                    "\"",
                    "\'",
                    " ",
                    "\t",
                    "\n",
                    "\r",
                    "\f"])* >
            
    | <CONSTANTE_NUM_INTEIRA_INVALIDA: ((<DIGIT>){3}(<DIGIT>)*) >
    | <CONSTANTE_NUM_REAL_INVALIDA: ((<DIGIT>){5}(<DIGIT>)*(<DOT>)(<DIGIT>)(<DIGIT>)*) >
    | <STRING_INVALIDA: "\"" (~["\n","\r","\""])* ~["\""]
                                            | "\'" (~["\n","\r","\'"])* ~["\'"]>
  }